Implementation Notes for the zak compiler
=========================================

The compiler is built in stages, as denoted by the following diagram:

    source->PAR->AST->TAC->RTL->GEN->assembly

These stages are:
PAR: the parser.  Builds a parse tree from the token stream.  Implemented using
 pyparsing (https://pythonhosted.org/pyparsing/), a combinatorial parser.  It's
 recursive descent and we don't use lookahead, so we have to take care to avoid
 left-recursion.
 There is a close correspondence between expressions in the parser code and
 productions in the specification of the grammar (see file LANGUAGE).
 [class Parser in parser.py]
AST: the Abstract Syntax Tree builder.  Converts the parser output into object
 trees more closely matching the semantics of the language.  The main nontrivial
 transformation is the conversion of type names (e.g. in declarations), as they
 are written 'inside-out' in the syntax.  The type objects (subclasses of Type)
 are used by some of the following stages.
 As a rule, an AST node class should have a 'build' classmethod which interprets
 the PAR output; separating this from the __init__ allows later stages of the
 pipeline to create their own AST objects, e.g. to rewrite the AST to support
 optimisation or to convert an expression into another form already handled.
 [class AST_builder in ast_build.py]
TAC: Two-Address Code, the first intermediate form.  Converts expressions,
 statements etc. into sequences of TACStatements, which (with the arguable
 exception of TACCall) have at most two arguments.  In order to do this, the
 TACifier creates gensyms to hold intermediate results; these are normally
 assumed to be unneeded ('killable') as soon as they have been used as the src
 (source) name of a TACStatement (some statements either don't imply a kill at
 all, or imply a kill of both their src and dst - for instance TACWrite).  When
 a gensym is not killable (e.g. it is the address for a read-modify-write of an
 lvalue) it is wrapped in a NoKill object (in this example, the read would use
 a NoKill while the write would use the bare Gensym, as the write is the last
 use of the symbol and can thus kill it).
 [class TACifier in tacifier.py]
RTL: Register Transfer Language, the second intermediate form.  Allocates
 storage for static and auto variables.  Performs register allocation on the
 stream of TACStatements for each function, generating a stream of
 RTLStatements including the operations necessary to fill and spill symbols to
 and from registers as needed.  At synchronisation points such as returns (or,
 when they're implemented, conditionals or jumps), will spill everything (but
 elide spill writes of symbols that haven't been dirtied).  Moreover, at labels
 and (again, to an extent) conditionals, registers may be considered stale and
 the symbols they held will need refilling.
 Optimisations here include detecting local spills that are _never_ refilled,
 and (if the local variable never has its address taken) eliding the spill.
 And, again, detecting local variables (whose address is not taken) which are
 never filled or spilled, and eliding their stack slot.
 A 'kill' of a symbol (which must be a gensym) implies that it will not be
 needed again, so any registers which were holding a copy of it are freed.  This
 often allows us to avoid ever spilling the symbol (as it is not possible to
 take the address of a gensym) and thus elide the stack slot.
 [class Allocator in allocator.py]
GEN: the code generator.  Converts RTLStatements into actual Z80 assembly
 language text, adding them to the bss, data or text section as appropriate.
 [class FunctionGenerator in codegen.py]
 Also, the global variable generator; converts static global variables into
 assembler directives, adding them to the bss or data section as appropriate.
 [class GlobalGenerator in codegen.py]

Register Preference Hints
-------------------------
Either the TACifier or the internal operations of the RTL allocator may generate
 register preference hints.  Most TACStatements have a 'prefer' member which is
 normally the empty string, but may instead be one of TAC.PREFER_RETURN,
 TAC.PREFER_LOWBYTE or TAC.PREFER_ADDRESS; it applies to the TACStatement's
 'dst' (destination symbol).  The allocator will use these when fetching dst
 (for TACAssign it also uses it when fetching 'src' (source symbol) since it
 will rename the fetched value to dst); it will also apply TAC.PREFER_LOWBYTE
 when fetch_src_word calls fetch_src_byte.
These hints are indications to the allocator about the kind of use we're going
 to want to make of a value, which it can use to direct its choice of register
 allocation when fetching that value.
PREFER_RETURN is used for an expression argument to the return statement; it
 will prefer A for bytes and HL for words, as those are the return registers for
 types of those sizes.  (When we implement register annotations, return
 statements for functions with a return register annotation will want to prefer
 that register by name.)
PREFER_LOWBYTE is used for a byte expression which will be used in a word
 context, typically because it will be added to a word or a pointer.  It will
 prefer the low byte of a splittable register whose high byte is also free.
 (Similarly, if it has to spill, it will prefer the low byte if the high byte is
 not locked.)
PREFER_ADDRESS is used for pointer expressions which will be dereferenced
 (either for read or write).  It will prefer HL, as this gives a wider range of
 options (e.g. LD r,(HL) versus LD A,(BC or DE)).
By following these hints, the allocator is often able to avoid register-to-
 register moves that would otherwise be necessary.  For instance, consider the
 case of subscripting an array by a byte expression.  Concretely:
	void main()
	{
		byte arr[3], sub;
		arr[sub];
	}
The TACifier will produce:
	TACDeclare(arr, auto, array [3] of byte)
	TACDeclare(sub, auto, byte)
	TACDeclare($(1), auto, byte)
	TACDeclare($(0), auto, Pointer(byte))
	TACAssign($(0)^A, arr)
	TACAdd($(0), sub)
	TACDeref($(1), $(0))
Assume that all registers start out empty.  The default register allocation
 would first load arr into BC (first empty word) naming it $(0), then move BC
 into HL (left operand of an add), then load sub into B (first empty byte), then
 move B into DE (promote to word: LD E,B; LD D,0), and finally do the ADD HL,DE.
 (It then goes on to do the TACDeref as LD B,(HL), then spills locals and RETs.)
But with the hints active, we first load arr into HL (PREFER_ADDRESS), then load
 sub into C (PREFER_LOWBYTE), promote it to word (LD B,0), and do the ADD HL,BC.
 By better register choice, we have avoided two moves (one 16-bit and one 8-bit)
 and thus produced smaller, faster code.
Essentially the hints allow the allocator to 'plan ahead' without having to
 actually look ahead in the TAC stream.  Such lookahead would probably require
 a complicated optimisation algorithm searching many combinations of register
 allocations to find the global optimum.  But instead, by applying the simple
 heuristics from the preference hints, we can allocate registers with a greedy
 algorithm, and still usually find at least a fairly good solution.
Of course, the effectiveness of these hints is greatest when the allocator has
 the freest choice of registers, which happens when all registers are empty (or
 all are full and unlocked, but needing to spill is not usually a good thing).
 Thus, correct kill logic for gensyms is important to maintain good register
 allocation in longer functions.

Register Clobbers
-----------------
Certain TACStatements cause the allocator to clobber the registers; that is, to
 ensure all values in registers are spilled if necessary, and to consider those
 values stale henceforward.
* TACCall.  All our registers are callee-clobbered, that's the ABI.  Of course,
  after the call the return register holds the return value (if any).
* TACLabel.  Since we could arrive at this label via a jump from elsewhere, our
  registers could hold anything after the label.
* TACIf.  Strictly speaking, our values don't become stale, but we need to make
  sure we spill them if dirty.  So for simplicity, we just clobber them.
* TACGoto.  Same reasoning as TACIf.
The above all clobber not only normal registers, but also the flag register (F).
 There are some other TACStatements which only clobber the flag register,
 because they generate instructions which will affect (some of) the flags.
* TACAdd (except 16-bit INC/DEC).  Produce ADD instructions.
* TACCall clobbers the flag register _before_ stacking callee arguments.  This
  is because it must add the caller stack size (which it doesn't know and must
  get from frame_len) to the caller's frame pointer, to produce the callee's
  frame pointer; this ADD instruction clobbers flags.
* TACCompare.  The CP instruction produces output in flags, which naturally
  clobbers anything that was there before.
* Any time we try to fill a bool that's currently in flags, we implement this
  with a clobber, because that has the byproduct of converting it to a byte 0 or
  1 in register A.
These clobbering rules are important for more than just optimisation, as they
 also determine when a <flag-ident> has defined behaviour.  For instance, a
 function call may not take a <flag-ident> in a bool parameter, because by the
 time we get round to stacking the argument, the flag has already gone.  (I'm
 not sure whether casting the <flag-ident> to bool would work; I think it might
 but I haven't tried it.  In any case I think the compiler would be within its
 rights to 'optimise' the cast to a rename, at which point it breaks.)
The interaction with labels and jumps is particularly complicated: the behaviour
 of a <flag-ident> is undefined iff it can ever be reached with that flag's
 state undefined.  So it's OK to test a flag after a label, as long as every
 place that can jump to that label (and the code before the label) generates a
 defined flag state.  It's even OK if there is some unreachable code that leaves
 the flags in an undefined state and then jumps to the label, because being
 unreachable it is not a path by which the <flag-ident> can be reached.
