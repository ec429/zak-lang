word; // like, yeah, man!

byte me;
byte foo, *bar;
extern word baz;
static byte answer_to_everything = 42;
word taxicab = 1729l;
word hexy = 0x5389l, short=0x2a;
byte octal = 0177;

extern byte do_a_thing(byte);
/* We can't use the names "f" and "i" as those alias registers in the generated
 * assembly, and the names of globals are kept for linking reasons.
 */
byte (*name_f)(byte); // declares _f as pointer to function (byte) returning byte
byte *g(byte); // declares g as function (byte) returning pointer to byte

byte (*h(byte))(word); // declares h as function (byte) returning pointer to function (word) returning byte

byte (**(*name_i)(byte))(word); // declares _i as pointer to function (byte) returning pointer to pointer to function (word) returning byte

byte call_byte_fn(byte (*)()); // declares call_byte_fn as function (pointer to function returning byte) returning byte

// prototypes for a couple of functions we actually define later
byte sum(byte a, byte b);
void strcpy(byte *dst, byte *src);

static bool question(byte answer)
{
	return answer == answer_to_everything;
}

byte sum(byte a, byte b)
{
	a += b;
	return a;
}

void strcpy(byte *dst, const byte *src)
{
	byte tmp;

	// A really smart compiler might optimise this to use LDI
	// But we don't expect to get that smart.  If you want that kind of performance, use asm
next:
	tmp = *src;
	*dst = tmp;
	src++;
	++dst;
	if (tmp)
		goto next;
}

struct i_exist_somewhere;

struct u32
{
	word hi;
	word lo;
};

struct two_u32 /* nested structs test */
{
	struct u32 x, y;
};

struct u32 number_of_foos;

void add_u32(struct u32 *dst, struct u32 *src)
{
	dst->lo += src->lo;
	if (#C) // test carry flag
		dst->hi++;
	dst->hi += src->hi;
}

extern void puts(const byte *);

const byte *text = "Nope.";

byte main()
{
	byte *hello = (byte *)"Hello sailor"; // naughty!
	struct u32 bar_count = {.lo = 5};
	byte *offset;

	//bar_count.lo += 18;
	offset = hello;
	offset += 6;
	strcpy(offset, "world!");
	puts(hello);
	return 0;
}
